        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <time.h>
        -:    4:#include <stdio.h>
        -:    5:#include <stdlib.h>
        -:    6:#include <string.h>
        -:    7:
        -:    8:#define MAX_TESTS 10000
        -:    9:#define QUIT_ON_ASSERT_FAILURE 0
        -:   10:#define TESTCARD "adventurer"
        -:   11:
function countTreasures called 10000 returned 100% blocks executed 100%
    10000:   12:int countTreasures(struct gameState game, int player) {
    10000:   13:	int count = 0, i;
        -:   14:	
  1267491:   15:	for (i = 0; i < game.deckCount[player]; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  1257491:   16:		if (game.deck[player][i] == copper || game.deck[player][i] == silver || game.deck[player][i] == gold) {	
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
branch  2 taken 92% (fallthrough)
branch  3 taken 8%
branch  4 taken 9% (fallthrough)
branch  5 taken 91%
   290161:   17:			count++;
        -:   18:		}
        -:   19:	}
        -:   20:	
   620405:   21:	for (i = 0; i < game.discardCount[player]; i++) {
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
   610405:   22:		if (game.discard[player][i] == copper || game.discard[player][i] == silver || game.discard[player][i] == gold) {
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
branch  2 taken 92% (fallthrough)
branch  3 taken 8%
branch  4 taken 9% (fallthrough)
branch  5 taken 91%
   140929:   23:			count++;
        -:   24:		}
        -:   25:	}
        -:   26:	
    10000:   27:	return count;
        -:   28:}
        -:   29:
function assert1 called 49585 returned 100% blocks executed 100%
    49585:   30:int assert1(int result, char *errorMsg, int testNumber) {
    49585:   31:	if (!result) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       98:   32:		fprintf(stderr, "ASSERTION FAILURE ON TEST %d: %s\n", testNumber, errorMsg);
call    0 returned 100%
        -:   33:		if (QUIT_ON_ASSERT_FAILURE) {
        -:   34:		  exit(result);
        -:   35:		}
      196:   36:		return 1;
        -:   37:	}
    49487:   38:}
        -:   39:
        -:   40:
function main called 1 returned 100% blocks executed 87%
        1:   41:int main() {
        -:   42:
        1:   43:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, 
        -:   44:	sea_hag, tribute, smithy};
        -:   45:
        -:   46:	int numTest, numPlayers, player, seed, card, value, i; 
        1:   47:	int numTreasures = 0, drawnTreasure = 0, cardDrawn = 0, z = 0;
        1:   48:	int numFailed = 0;
        -:   49:	int adventurerPos[4];
        -:   50:	int temphand[MAX_HAND];
        -:   51:	struct gameState game, gameAfterCall;
        -:   52:	time_t t;
        -:   53:	
        1:   54:	srand((unsigned) time(&t));
call    0 returned 100%
call    1 returned 100%
        -:   55:	
        1:   56:	printf("----------------- Random Testing Card: %s ----------------\n", TESTCARD);
call    0 returned 100%
        -:   57:
    10001:   58:	for (numTest = 0; numTest < MAX_TESTS; numTest++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    10000:   59:		numPlayers = (rand() % 3) + 2;
call    0 returned 100%
        -:   60:
    10000:   61:		seed = rand();
call    0 returned 100%
        -:   62:
    10000:   63:		initializeGame(numPlayers, k, seed, &game);
call    0 returned 100%
        -:   64:
        -:   65:		// Randomly give each player cards
    40023:   66:		for (player = 0; player < numPlayers; player++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   67:			// Randomly assign number of cards to each player
    30023:   68:			game.handCount[player] = (rand() % (MAX_HAND - 1)) + 1;
call    0 returned 100%
    30023:   69:			game.deckCount[player] = rand() % (MAX_DECK - game.handCount[player]);
call    0 returned 100%
    30023:   70:			game.discardCount[player] = rand() % (MAX_DECK - game.handCount[player] - game.deckCount[player]);
call    0 returned 100%
        -:   71:			
        -:   72:			// Randomly give each player a deck
  3806001:   73:			for (card = 0; card < game.deckCount[player]; card++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  3775978:   74:				value = rand() % 13;
call    0 returned 100%
  3775978:   75:				if (value < 10)
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
  2904603:   76:					game.deck[player][card] = k[value];
   871375:   77:				else if (value == 10)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
   289715:   78:					game.deck[player][card] = copper;
   581660:   79:				else if (value == 11)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
   291219:   80:					game.deck[player][card] = silver;
   290441:   81:				else if (value == 12)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   290441:   82:					game.deck[player][card] = gold;
        -:   83:				else
    #####:   84:					if(assert1(1, "not a valid card", numTest) == 1) numFailed++;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   85:			}
        -:   86:
        -:   87:			// Randomly give each player a discard pile
  1877694:   88:			for (card = 0; card < game.discardCount[player]; card++) {
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
  1847671:   89:				value = rand() % 13;
call    0 returned 100%
  1847671:   90:				if (value < 10)
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
  1421376:   91:					game.discard[player][card] = k[value];
   426295:   92:				else if (value == 10)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
   141911:   93:					game.discard[player][card] = copper;
   284384:   94:				else if (value == 11)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
   141891:   95:					game.discard[player][card] = silver;
   142493:   96:				else if (value == 12)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   142493:   97:					game.discard[player][card] = gold;
        -:   98:				else
    #####:   99:					if(assert1(1, "not a valid card", numTest) == 1) numFailed++;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  100:			}
        -:  101:			
        -:  102:			// Randomly give each player a hand
  7517732:  103:			for (card = 0; card < game.handCount[player]; card++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  7487709:  104:				value = rand() % 13;
call    0 returned 100%
  7487709:  105:				if (value < 10)
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
  5760552:  106:					game.hand[player][card] = k[value];
  1727157:  107:				else if (value == 10)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
   575519:  108:					game.hand[player][card] = copper;
  1151638:  109:				else if (value == 11)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
   576642:  110:					game.hand[player][card] = silver;
   574996:  111:				else if (value == 12)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   574996:  112:					game.hand[player][card] = gold;
        -:  113:				else
    #####:  114:					if(assert1(1, "not a valid card", numTest) == 1) numFailed++;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  115:			}
        -:  116:			
        -:  117:			//Place an adventurer card in each player's hand
    30023:  118:			adventurerPos[player] = rand() % game.handCount[player];
call    0 returned 100%
    30023:  119:			game.hand[player][adventurerPos[player]] = adventurer;
        -:  120:		}
        -:  121:
    10000:  122:		player = rand() % numPlayers;
call    0 returned 100%
    10000:  123:		game.whoseTurn = player;
        -:  124:		
        -:  125:		//Copy the game state
    10000:  126:		memcpy(&gameAfterCall, &game, sizeof game);
    10000:  127:		if(assert1(!memcmp(&gameAfterCall, &game, sizeof game), "game and gameAfterCall are not the same", numTest) == 1) numFailed++;
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        -:  128:		
    10000:  129:		numTreasures = countTreasures(game, player);
call    0 returned 100%
    10000:  130:		if (numTreasures > 2) {
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
     9566:  131:			numTreasures = 2;
        -:  132:		}
        -:  133:		
        -:  134:		//Play Card
        -:  135:
    10000:  136:		if(assert1(playAdventurer(player, &gameAfterCall, drawnTreasure, cardDrawn, temphand, z) == 0, "function playAdventurer failed", numTest) == 1) numFailed++;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  137:		
        -:  138:		//tests
        -:  139:
    10000:  140:		if(assert1(gameAfterCall.handCount[player] == game.handCount[player] + numTreasures, "error in adding treasures to hand", numTest) == 1) numFailed++;
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        -:  141:		
    29585:  142:		for (i = 1; i <= numTreasures; i++) {
branch  0 taken 66%
branch  1 taken 34% (fallthrough)
    39242:  143:			if(assert1(gameAfterCall.hand[player][gameAfterCall.handCount[player]-i] == copper || 
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    13109:  144:			        gameAfterCall.hand[player][gameAfterCall.handCount[player]-i] == silver ||
     6548:  145:			        gameAfterCall.hand[player][gameAfterCall.handCount[player]-i] == gold, "cards put into hand were not treasures", numTest) == 1) numFailed++;
        -:  146:		}
        -:  147:	}
        -:  148:
        1:  149:	printf("*-*-*-*-* RANDOM TESTS COMPLETE *-*-*-*-*\n");
call    0 returned 100%
        1:  150:	printf("Number of failed tests = %d\n", numFailed);
call    0 returned 100%
        -:  151:
        1:  152:	return 0;
        -:  153:}
